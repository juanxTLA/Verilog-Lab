// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

//`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
//`define ENABLE_CLOCK2
//`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
//`define ENABLE_VGA
//`define ENABLE_ACCELEROMETER
//`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
//add wires that we need for this project here
localparam WIDTH = 24;
localparam DEPTH = 36;

wire	pll_led;
wire clk200; //rdClk
wire rdRst, rdDat;
wire wrRst, wrDat;

wire outSig, q, rdEn, full;


wire [WIDTH-1:0] 	count; // input to fibonacci rom
wire [WIDTH-1:0]	rdData;
wire [WIDTH-1:0]	wrData;

//wire notButton0;
//wire [9:0] sw_sync;
//
//
//wire [15:0] shiftA;
//wire [15:0] shiftB;
//wire        shiftA_en;
//wire        shiftB_en;
//wire [31:0] aluResult;
//
//reg [2:0] OpCode;
//wire  buttonPress;
//reg   buttonPress_dly;
//reg   ShowOpCode;


//=======================================================
//  Structural coding
//=======================================================
//pll section
syspll pll67 (
	.areset(~KEY[0]),
	.inclk0(MAX10_CLK1_50),
	.c0(clk200), //THIS IS A WIRE
	.locked(pll_led)
);

assign LEDR[0] = pll_led;
	
meta #(
  .DATA_WIDTH (1),
  .DEPTH (2)
) wrRstMeta (
  .in_sig (~pll_led),
  .out_sig (wrRst),
  //.clk	(clk200)
);

meta #(
  .DATA_WIDTH (1),
  .DEPTH (2)
) rdRstMeta (
  .clk (clk200),
  .in_sig (~pll_led),
  .out_sig (rdRst)
);

//read enable section
meta #(
  .DATA_WIDTH (1),
  .DEPTH (2)
) rdEnMeta (
  .clk (clk200),
  .in_sig (KEY[1]),
  .out_sig (outSig)
);


dff #(
    .WIDTH (WIDTH)
  )
  ff0(
    .clk    (clk200),
    .d      (outSig),
    .q      (q)
  );
  
and and0(rdEn, ~outSig, q);

up_counter #(
	.TERM_CNT	(DEPTH),
	.WIDTH		(WIDTH)
  ) wrDataCounter(
	.clk		(MAX10_CLK1_50),
	.count	(count),
	.en		(~full),
	.reset	(wrRst)
  );
  
  
fibonacci_rom
	fib(
	.rddat	(wrData),
	.rdadr	(count)
  );
    
async_fifo #(
	.WIDTH	(WIDTH),
   .DEPTH	(DEPTH)
) fifo (
	.wrClk	(MAX10_CLK1_50),
	.wrRst	(wrRst),
	.wrEn		(~full),
	.wrData	(wrData),
	.rdClk	(clk200),
	.rdRst	(rdRst),
	.rdEn		(rdEn),
	.full		(full),
	.empty	(LEDR[1]),
	.rdData	(rdData)
);

display_driver hex_leds (
  .clk        (clk200),
  .dispMode   (1'b1),       
  .oneMsPulse (1'b1),
  .OpReg      (0),          
  .ShowOpReg  (0),       
  .OpCode     (0),
  .ShowOpCode (0), 
  .OpResult   (rdData),
  .HEX0       (HEX0),
  .HEX1       (HEX1),
  .HEX2       (HEX2),
  .HEX3       (HEX3),
  .HEX4       (HEX4),
  .HEX5       (HEX5)
);

endmodule